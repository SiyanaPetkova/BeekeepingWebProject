// <auto-generated />
using System;
using Beekeeping.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Beekeeping.Data.Migrations
{
    [DbContext(typeof(BeekeepingDbContext))]
    [Migration("20230730134230_SeedApiaryBeeColonyAndBeedQueen")]
    partial class SeedApiaryBeeColonyAndBeedQueen
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Beekeeping.Data.Models.Apiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("NumberOfHives")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Apiaries");

                    b.HasData(
                        new
                        {
                            Id = 9150,
                            Latitude = 43.346221999999997,
                            Location = "Село Климентово, Варна",
                            Longitude = 27.946314999999998,
                            Name = "Климентово",
                            NumberOfHives = 0,
                            OwnerId = "44C36B39-AD0A-4260-B448-45BB03158888",
                            RegistrationNumber = "9150-0015"
                        },
                        new
                        {
                            Id = 9156,
                            Latitude = 43.330429000000002,
                            Location = "Село Зорница, Варна",
                            Longitude = 27.734943999999999,
                            Name = "Зорница",
                            NumberOfHives = 0,
                            OwnerId = "44C36B39-AD0A-4260-B448-45BB03158888",
                            RegistrationNumber = "9156-0017"
                        });
                });

            modelBuilder.Entity("Beekeeping.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44c36b39-ad0a-4260-b448-45bb03158888"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5af8a06-dd09-49ed-b9c6-5fecf7bb6f2c",
                            Email = "demouser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "DEMOUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECOgb9K9WQeYB5Q2NfLj2s8D9TeLtiHj7l87daft28daDQvV9UT0ERNWBQnPiKTLKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FF209E985B208944AE0E653F7BAF1026",
                            TwoFactorEnabled = false,
                            UserName = "demouser@gmail.com"
                        });
                });

            modelBuilder.Entity("Beekeeping.Data.Models.BeeColony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComмent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<int>("BeeQueenId")
                        .HasColumnType("int");

                    b.Property<bool>("MatedBeeQueen")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfAdditionalBoxes")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSupers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerOfTheApiary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SecondBroodBox")
                        .HasColumnType("bit");

                    b.Property<bool>("Super")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfBroodBox")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.HasIndex("BeeQueenId")
                        .IsUnique();

                    b.ToTable("BeeColonies");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            AdditionalComмent = "Основно семейство",
                            ApiaryId = 9150,
                            BeeQueenId = 10001,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 1,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4447",
                            SecondBroodBox = true,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10002,
                            AdditionalComмent = "Основно семейство",
                            ApiaryId = 9150,
                            BeeQueenId = 10002,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4448",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10003,
                            AdditionalComмent = "Отводка",
                            ApiaryId = 9150,
                            BeeQueenId = 10003,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 0,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4449",
                            SecondBroodBox = false,
                            Super = false,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10004,
                            AdditionalComмent = "Основно семейство",
                            ApiaryId = 9150,
                            BeeQueenId = 10004,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4450",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10005,
                            AdditionalComмent = "Основно семейство",
                            ApiaryId = 9150,
                            BeeQueenId = 10005,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4451",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10006,
                            AdditionalComмent = "Отводка",
                            ApiaryId = 9150,
                            BeeQueenId = 10006,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4452",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10007,
                            AdditionalComмent = "Отводка",
                            ApiaryId = 9156,
                            BeeQueenId = 10007,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4453",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10008,
                            AdditionalComмent = "Отводка",
                            ApiaryId = 9156,
                            BeeQueenId = 10008,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4454",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        },
                        new
                        {
                            Id = 10009,
                            AdditionalComмent = "Отводка",
                            ApiaryId = 9156,
                            BeeQueenId = 10009,
                            MatedBeeQueen = true,
                            NumberOfAdditionalBoxes = 0,
                            NumberOfSupers = 1,
                            OwnerOfTheApiary = "44C36B39-AD0A-4260-B448-45BB03158888",
                            PlateNumber = "100-4455",
                            SecondBroodBox = false,
                            Super = true,
                            TypeOfBroodBox = "Многокорпусен"
                        });
                });

            modelBuilder.Entity("Beekeeping.Data.Models.BeeQueen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BeeQueenType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BeeQueenYearOfBirth")
                        .HasColumnType("int");

                    b.Property<string>("Breeder")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BeeQueens");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            BeeQueenType = "Карника",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10002,
                            BeeQueenType = "Карника",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10003,
                            BeeQueenType = "Неизвестна",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Роева"
                        },
                        new
                        {
                            Id = 10004,
                            BeeQueenType = "Карника",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10005,
                            BeeQueenType = "БМП",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10006,
                            BeeQueenType = "БМП",
                            BeeQueenYearOfBirth = 2022,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10007,
                            BeeQueenType = "Карника",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Собствено производство"
                        },
                        new
                        {
                            Id = 10008,
                            BeeQueenType = "Неизвестна",
                            BeeQueenYearOfBirth = 2023,
                            Breeder = "Роева"
                        },
                        new
                        {
                            Id = 10009,
                            BeeQueenType = "Карника",
                            BeeQueenYearOfBirth = 2022,
                            Breeder = "Собствено производство"
                        });
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Cost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("CostValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfTheCost")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfCost")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.HiveFeeding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfFeeding")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedingType")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("NumberOfBeeHives")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceOfFeeding")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("HiveFeeding");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.HiveTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfTreatedColonies")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceOfTheTreatment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ResultAndCommentAboutTheTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HiveTreatments");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfTheIncome")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IncomeValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeOfIncome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeeColonyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DayOfInspection")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int?>("NumberOfBroodFrames")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfFrames")
                        .HasColumnType("int");

                    b.Property<int>("Strenght")
                        .HasColumnType("int");

                    b.Property<int>("Temperament")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeeColonyId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.NoteToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateToBeDone")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NoteToDos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Apiary", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.ApplicationUser", null)
                        .WithMany("Apiaries")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.BeeColony", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.Apiary", "Apiary")
                        .WithMany("BeeHives")
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beekeeping.Data.Models.BeeQueen", "BeeQueen")
                        .WithOne("BeeColony")
                        .HasForeignKey("Beekeeping.Data.Models.BeeColony", "BeeQueenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apiary");

                    b.Navigation("BeeQueen");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Inspection", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.BeeColony", "BeeColony")
                        .WithMany("Inspections")
                        .HasForeignKey("BeeColonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeeColony");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beekeeping.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Beekeeping.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beekeeping.Data.Models.Apiary", b =>
                {
                    b.Navigation("BeeHives");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Apiaries");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.BeeColony", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Beekeeping.Data.Models.BeeQueen", b =>
                {
                    b.Navigation("BeeColony");
                });
#pragma warning restore 612, 618
        }
    }
}
